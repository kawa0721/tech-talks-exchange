\nimport { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { ChevronLeft, Loader2 } from \"lucide-react\";\nimport Navbar from \"@/components/Navbar\";\nimport { Post, User } from \"@/types\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { ja } from \"date-fns/locale\";\nimport PostCard from \"@/components/PostCard\";\nimport CommentSection from \"@/components/CommentSection\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst PostDetail = () => {\n  const { postId } = useParams<{ postId: string }>();\n  const [post, setPost] = useState<Post | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [commentsCount, setCommentsCount] = useState(0);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      if (!postId) return;\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        // まず投稿データを取得\n        const { data: postData, error: postError } = await supabase\n          .from('posts')\n          .select('*')\n          .eq('id', postId)\n          .single();\n          \n        if (postError) {\n          throw postError;\n        }\n        \n        if (!postData) {\n          setError(\"投稿が見つかりません\");\n          return;\n        }\n        \n        // 次にユーザー情報を取得 - ログインステータスに関わらず情報を表示\n        let userData: User = {\n          id: postData.user_id || \"unknown\",\n          name: \"匿名ユーザー\",\n          avatar: undefined\n        };\n        \n        if (postData.user_id) {\n          // 複数の方法でプロフィール取得を試みる\n          try {\n            console.log('Trying to fetch profile with JOIN first...');\n            const { data: profile, error: userError } = await supabase\n              .from('profiles')\n              .select('*')\n              .eq('id', postData.user_id)\n              .single();\n              \n            if (!userError && profile) {\n              // ユーザー名が設定されていない場合はユーザーIDの一部を表示\n              const displayName = profile.username || `ユーザー_${postData.user_id.substring(0, 5)}`;\n              \n              userData = {\n                id: profile.id,\n                name: displayName,\n                avatar: profile.avatar_url\n              };\n              \n              console.log('Successfully fetched user profile:', userData);\n            } else {\n              console.log(\"Failed to load user profile with standard method:\", userError);\n              \n              console.log('Falling back to basic profile query...');\n              // 直接シンプルなクエリでリトライ\n              const { data: basicProfile, error: basicError } = await supabase\n                .from('profiles')\n                .select('id, username, avatar_url')\n                .eq('id', postData.user_id)\n                .single();\n                \n              if (!basicError && basicProfile) {\n                userData = {\n                  id: basicProfile.id,\n                  name: basicProfile.username || `ユーザー_${postData.user_id.substring(0, 5)}`,\n                  avatar: basicProfile.avatar_url\n                };\n                console.log('Successfully fetched basic user profile:', userData);\n              } else {\n                console.log(\"Failed to load basic user profile:\", basicError);\n              }\n            }\n          } catch (fetchError) {\n            console.error(\"Error during profile fetching:\", fetchError);\n          }\n        }\n        \n        // 現在のユーザーがこの投稿をいいねしているか確認\n        let userLiked = false;\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          const { data: likeData } = await supabase\n            .from('likes')\n            .select('id')\n            .match({ user_id: user.id, post_id: postId })\n            .maybeSingle();\n            \n          userLiked = !!likeData;\n        }\n        \n        // コメント数を取得\n        const { count: commentCount, error: countError } = await supabase\n          .from('comments')\n          .select('id', { count: 'exact', head: true })\n          .eq('post_id', postId);\n          \n        if (!countError) {\n          setCommentsCount(commentCount || 0);\n        }\n        \n        // いいね数を取得\n        const { count: likesCount, error: likesCountError } = await supabase\n          .from('likes')\n          .select('id', { count: 'exact', head: true })\n          .eq('post_id', postId);\n        \n        // 実際のいいね数を使用\n        const actualLikesCount = likesCountError ? 0 : (likesCount || 0);\n        \n        // 投稿データを変換\n        const formattedPost: Post = {\n          id: postData.id,\n          title: postData.title,\n          content: postData.content,\n          userId: postData.user_id || \"unknown\",\n          user: userData,\n          channelId: postData.channel_id,\n          createdAt: new Date(postData.created_at),\n          updatedAt: postData.updated_at ? new Date(postData.updated_at) : undefined,\n          likesCount: actualLikesCount, // 実際のいいね数を使用\n          commentsCount: commentCount || 0, // 実際のコメント数を使用\n          liked: userLiked,\n          images: postData.images || []\n        };\n        \n        setPost(formattedPost);\n        \n        // チャンネル情報を取得\n        if (postData.channel_id) {\n          await getChannelName(postData.channel_id);\n        }\n      } catch (error: any) {\n        console.error(\"投稿取得エラー:\", error);\n        setError(error.message || \"投稿の取得に失敗しました\");\n        toast({\n          title: \"エラー\",\n          description: \"投稿の取得に失敗しました\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchPost();\n  }, [postId]);\n\n  // コメントが追加/削除されたときに投稿を更新する\n  const handleCommentCountChange = (newCount: number) => {\n    if (post) {\n      setPost({\n        ...post,\n        commentsCount: newCount\n      });\n    }\n  };\n\n  // チャンネル情報の状態\n  const [channelName, setChannelName] = useState<string>(\"読み込み中...\");\n  \n  // Find channel name by ID - Supabaseから取得\n  const getChannelName = async (channelId: string) => {\n    if (!channelId) {\n      setChannelName(\"未分類\");\n      return;\n    }\n    \n    try {\n      const { data: channel, error } = await supabase\n        .from('channels')\n        .select('name')\n        .eq('id', channelId)\n        .single();\n        \n      if (error || !channel) {\n        console.error(\"チャンネル取得エラー:\", error);\n        setChannelName(\"不明なチャンネル\");\n        return;\n      }\n      \n      setChannelName(channel.name);\n    } catch (error) {\n      console.error(\"チャンネル取得エラー:\", error);\n      setChannelName(\"不明なチャンネル\");\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n        <div className=\"container flex justify-center items-center min-h-[80vh]\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !post) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n        <div className=\"container py-12 text-center\">\n          <h1 className=\"text-2xl font-bold mb-4 text-destructive\">{error}</h1>\n          <p className=\"mb-6\">お探しの投稿は存在しないか、削除されました。</p>\n          <Button asChild>\n            <Link to=\"/\">ホームに戻る</Link>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />\n      <div className=\"container py-8 fade-in\">\n        <div className=\"mx-auto max-w-3xl\">\n          <div className=\"mb-6\">\n            <Button variant=\"ghost\" asChild className=\"mb-4\">\n              <Link to=\"/\" className=\"flex items-center\">\n                <ChevronLeft className=\"mr-1 h-4 w-4\" />\n                ディスカッションに戻る\n              </Link>\n            </Button>\n            \n            <PostCard \n              post={post} \n              channelName={channelName}\n              showChannel={true} \n            />\n            \n            <CommentSection \n              postId={post?.id || \"\"} \n              postOwnerId={post?.userId}\n              onCommentCountChange={handleCommentCountChange}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostDetail;\n