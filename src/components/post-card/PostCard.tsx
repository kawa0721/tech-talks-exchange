\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card } from \"@/components/ui/card\";\nimport { Post } from \"@/types\";\nimport PostCardHeader from \"./PostCardHeader\";\nimport PostCardContent from \"./PostCardContent\";\nimport PostCardFooter from \"./PostCardFooter\";\nimport ContentToggler from \"./ContentToggler\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface PostCardProps {\n  post: Post;\n  channelName?: string;\n  showChannel?: boolean;\n  isTrending?: boolean;\n  isPopular?: boolean;\n}\n\nconst PostCard = ({ \n  post, \n  channelName, \n  showChannel = false, \n  isTrending = false,\n  isPopular = false\n}: PostCardProps) => {\n  const [liked, setLiked] = useState(post.liked || false);\n  const [likesCount, setLikesCount] = useState(post.likesCount || 0);\n  const [commentsCount, setCommentsCount] = useState(post.commentsCount || 0);\n  const [showFullContent, setShowFullContent] = useState(false);\n\n  // 投稿の詳細情報を取得する\n  useEffect(() => {\n    const fetchPostDetails = async () => {\n      try {\n        // いいね状態の確認\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          const { data: likeData } = await supabase\n            .from('likes')\n            .select('id')\n            .match({ user_id: user.id, post_id: post.id })\n            .maybeSingle();\n            \n          setLiked(!!likeData);\n        }\n\n        // コメント数を取得\n        const { count, error: countError } = await supabase\n          .from('comments')\n          .select('id', { count: 'exact', head: true })\n          .eq('post_id', post.id);\n          \n        if (!countError && count !== null) {\n          setCommentsCount(count);\n        }\n\n        // いいね数を取得\n        const { count: likesCountResult, error: likesCountError } = await supabase\n          .from('likes')\n          .select('id', { count: 'exact', head: true })\n          .eq('post_id', post.id);\n          \n        if (!likesCountError && likesCountResult !== null) {\n          setLikesCount(likesCountResult);\n        }\n      } catch (error) {\n        console.error(\"Error fetching post details:\", error);\n      }\n    };\n    \n    fetchPostDetails();\n  }, [post.id]);\n\n  // 投稿内容を一定の長さに制限する\n  const contentPreviewLength = 150; // プレビューの文字制限\n  const contentPreview = post.content.length > contentPreviewLength \n    ? post.content.substring(0, contentPreviewLength) + '...' \n    : post.content;\n  \n  const hasLongContent = post.content.length > contentPreviewLength;\n\n  const toggleLike = async () => {\n    // UI上の状態を即座に更新（オプティミスティックUI）\n    setLiked(!liked);\n    setLikesCount(liked ? likesCount - 1 : likesCount + 1);\n    \n    // サーバーサイドでも更新\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) return; // ログインしていない場合は何もしない\n\n    if (!liked) {\n      // いいねを追加\n      const { error } = await supabase\n        .from('likes')\n        .insert([{ user_id: user.id, post_id: post.id }]);\n        \n      if (error) {\n        console.error(\"いいね追加エラー:\", error);\n        // エラーが発生した場合は元の状態に戻す\n        setLiked(liked);\n        setLikesCount(likesCount);\n      }\n    } else {\n      // いいねを削除\n      const { error } = await supabase\n        .from('likes')\n        .delete()\n        .match({ user_id: user.id, post_id: post.id });\n        \n      if (error) {\n        console.error(\"いいね削除エラー:\", error);\n        // エラーが発生した場合は元の状態に戻す\n        setLiked(liked);\n        setLikesCount(likesCount);\n      }\n    }\n  };\n\n  const handleContentToggle = (e: React.MouseEvent) => {\n    e.preventDefault(); // リンククリックを防止\n    setShowFullContent(!showFullContent);\n  };\n\n  return (\n    <Card className={`mb-4 overflow-hidden hover:shadow-md transition-shadow ${isTrending ? 'border-blue-400 dark:border-blue-600 shadow-md' : ''} ${isPopular ? 'border-amber-400 dark:border-amber-600 shadow-md' : ''}`}>\n      <PostCardHeader \n        post={post} \n        channelName={channelName} \n        showChannel={showChannel}\n        isTrending={isTrending}\n        isPopular={isPopular}\n      />\n      \n      <Link to={`/post/${post.id}`}>\n        <PostCardContent \n          post={post} \n          showFullContent={showFullContent} \n          contentPreview={contentPreview} \n        />\n      </Link>\n      \n      {/* 「全文表示」ボタン - 長い投稿のみ表示 */}\n      {hasLongContent && (\n        <ContentToggler \n          showFullContent={showFullContent}\n          onToggle={handleContentToggle}\n        />\n      )}\n      \n      <PostCardFooter \n        postId={post.id}\n        commentsCount={commentsCount}\n        likesCount={likesCount}\n        liked={liked}\n        onToggleLike={toggleLike}\n      />\n    </Card>\n  );\n};\n\nexport default PostCard;\n