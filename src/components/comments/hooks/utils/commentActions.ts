\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { toast } from \"sonner\";\n\n/**\n * Submits a new comment to the database\n */\nexport async function submitComment(\n  postId: string,\n  content: string,\n  userId: string | null,\n  nickname?: string\n) {\n  try {\n    // セッションを再確認 (念のため、ログインユーザーの場合)\n    if (userId) {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        throw new Error(\"セッションが期限切れです。再ログインしてください。\");\n      }\n    }\n\n    // Prepare comment data based on user status\n    const commentData = {\n      post_id: postId,\n      content: content,\n      // For anonymous users, set user_id to null and use nickname\n      user_id: userId || null,\n      guest_nickname: !userId ? (nickname || \"ゲスト\") : null\n    };\n\n    // 重要な修正: まず挿入操作だけを行う\n    const { error: insertError } = await supabase\n      .from('comments')\n      .insert([commentData]);\n\n    if (insertError) {\n      console.error(\"コメント投稿DB エラー:\", insertError);\n      throw insertError;\n    }\n\n    // 次に、新しいコメントを別途取得\n    const { data, error: fetchError } = await supabase\n      .from('comments')\n      .select('*')\n      .eq('post_id', postId)\n      .eq('user_id', userId || null)\n      .eq('content', content)\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .single();\n\n    if (fetchError) {\n      console.error(\"コメント取得エラー:\", fetchError);\n      throw fetchError;\n    }\n\n    return data;\n  } catch (error) {\n    console.error(\"コメント投稿エラー:\", error);\n    throw error;\n  }\n}\n\n/**\n * Submits a reply to a comment\n */\nexport async function submitReply(\n  postId: string,\n  parentId: string,\n  content: string,\n  userId: string | null,\n  nickname?: string\n) {\n  try {\n    // セッションを再確認 (念のため、ログインユーザーの場合)\n    if (userId) {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        throw new Error(\"セッションが期限切れです。再ログインしてください。\");\n      }\n    }\n    \n    // Prepare reply data based on user status\n    const replyData = {\n      post_id: postId,\n      content: content,\n      parent_id: parentId,\n      // For anonymous users, set user_id to null and use nickname\n      user_id: userId || null,\n      guest_nickname: !userId ? (nickname || \"返信\") : null\n    };\n    \n    // 重要な修正: まず挿入操作だけを行う\n    const { error: insertError } = await supabase\n      .from('comments')\n      .insert([replyData]);\n\n    if (insertError) {\n      console.error(\"返信投稿エラー:\", insertError);\n      throw insertError;\n    }\n\n    // 次に、新しい返信を別途取得\n    const { data, error: fetchError } = await supabase\n      .from('comments')\n      .select('*')\n      .eq('post_id', postId)\n      .eq('parent_id', parentId)\n      .eq('user_id', userId || null)\n      .eq('content', content)\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .single();\n\n    if (fetchError) {\n      console.error(\"返信取得エラー:\", fetchError);\n      throw fetchError;\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(\"返信投稿エラー:\", error);\n    throw error;\n  }\n}\n\n/**\n * Toggles like status for a comment\n */\nexport async function toggleCommentLike(commentId: string, userId: string, isLiked: boolean) {\n  // セッションを再確認\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session) {\n    throw new Error(\"セッションが期限切れです。再ログインしてください。\");\n  }\n  \n  try {\n    if (isLiked) {\n      // いいねを削除\n      const { error } = await supabase\n        .from('likes')\n        .delete()\n        .eq('user_id', userId)\n        .eq('comment_id', commentId);\n\n      if (error) {\n        console.error(\"いいね削除エラー:\", error);\n        throw error;\n      }\n      \n      return false;\n    } else {\n      // いいねを追加 - fix the array syntax\n      const { error } = await supabase\n        .from('likes')\n        .insert([{\n          user_id: userId,\n          comment_id: commentId\n        }]);\n\n      if (error) {\n        console.error(\"いいね追加エラー:\", error);\n        throw error;\n      }\n      \n      return true;\n    }\n  } catch (error) {\n    console.error(\"いいね処理エラー:\", error);\n    throw error;\n  }\n}\n\n/**\n * Deletes a comment\n */\nexport async function deleteCommentById(commentId: string, userId: string, postId: string) {\n  // セッションを再確認\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session) {\n    throw new Error(\"セッションが期限切れです。再ログインしてください。\");\n  }\n  \n  try {\n    // コメントを削除\n    const { error } = await supabase\n      .from('comments')\n      .delete()\n      .eq('id', commentId)\n      .eq('user_id', userId);\n\n    if (error) {\n      console.error(\"コメント削除エラー:\", error);\n      throw error;\n    }\n  } catch (error) {\n    console.error(\"コメント削除エラー:\", error);\n    throw error;\n  }\n}\n\n/**\n * Updates a comment's content\n */\nexport async function updateCommentContent(commentId: string, userId: string, newContent: string) {\n  // セッションを再確認\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session) {\n    throw new Error(\"セッションが期限切れです。再ログインしてください。\");\n  }\n\n  try {\n    const now = new Date().toISOString();\n    \n    // Fix the update operation type\n    const updateData = {\n      content: newContent,\n      updated_at: now\n    };\n    \n    // コメントを更新\n    const { error } = await supabase\n      .from('comments')\n      .update(updateData)\n      .eq('id', commentId)\n      .eq('user_id', userId);\n\n    if (error) {\n      console.error(\"コメント更新エラー:\", error);\n      throw error;\n    }\n    \n    return now;\n  } catch (error) {\n    console.error(\"コメント更新エラー:\", error);\n    throw error;\n  }\n}\n